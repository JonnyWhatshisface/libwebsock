libwebsock API Documentation

Getting Started With libwebsock API

1) Including in your project

To use libwebsock, you must include the websock/websock.h header file in your project and compile your code against the websock library.  (-lwebsock)

2) libwebsock Initialization

In your project, you must first set a context for use with libwebsock and then initialize it. Initialization currently takes three parameters: The libevent base, the flags to be passed to libevent and the maximum size allowed for a frames payload data.

Currently, the first two parameters are not in use and are reserved for future implementation of allowing you to tie it in to existing libevent implementations. As such, the following is an example of initialization allowing a maximum frame payload size of 1,024 bytes:

libwebsock_context *ctx = libwebsock_init(NULL,NULL,1024);

3) libwebsock Callback Registration

Once libwebsock is initialized, we must define the callbacks used to interact with libwebsock. The current default callbacks simply print data out on connects, disconnects and messages received. The default action for frames that are too large is to just close the socket with an error and not notify the other end. You’re obviously going to want to interact with your websocket sessions, so we have a few callbacks we can register here.

onopen – Called every time a connection is established.  Arguments, in order, are:
libwebsock_client_state *

onclose – Called every time a connection is closed. Arguments, in order, are:
libwebsock_client_state *

onmessage – Called every time a message is received. Arguments, in order, are:
libwebsock_client_state *
libwebsock_message *

onframetoolarge – Called every time a frames payload size exceeds the size specified at initialization. Arguments, in order, are:
libwebsock_client_state *
libwebsock_frame *

You can register your own callback functions by assigning them in the context. Make sure your functions can take the arguments passed on as specified for each. An example of registering your own callbacks is as follows:

ctx->onopen = your_onopen_function;
ctx->opnclose = your_onclose_fuction;
ctx->onmessahe = your_onmessage_function;
ctx->onframetoolarge = your_onframetoolarge_function;

4) Binding libwebsocket To A Socket (non-SSL)

There are currently two ways libwebsock can handle the incoming socket connections. First, libwebsock is capable of handling all socket connections for you, and does a fairly decent job at doing so. The sockets are non-blocking and threaded per a connection. On top of the threading per a connection, each event triggered is also threaded off per an event. This is used by using the libwebsock_bind() function.

Second, you can code your own socket handling and libevent handling, and just bind to your specified evutil_socket_t socket file descriptor with libwebsock_bind_socket() . This function takes the context as the first parameter (ctx) and the socketfd as the second.

The easiest and most convenient way to use libwebsock is to allow it to handle the sockets for you. Currently, libwebsock_bind() takes three arguments: The libwebsock context, the default IP address to bind to (0.0.0.0 for all) and the port to listen on. For example, to bind libwebsock to all IP’s and tcp port 1234, we would do the following:

libwebsock_bind(ctx, “0.0.0.0”, “1234”);

5) Start Listening for Connections

Once libwebsock is initialized, the callbacks are registered and the socketfd is set and bound, we can begin listening for incoming connections. To do this, we call the libwebsock_wait() function with the context as the argument:

libwebsock_wait(ctx);
